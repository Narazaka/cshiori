- var title = "cshiori";
- var description = "SHIORI/3.x on C lang!";
doctype html
html
	head
		meta(charset="UTF-8")
		title #{title} - #{description}
		link(rel="stylesheet", href="bootstrap.min.css")
		link(rel="stylesheet", href="bootstrap-theme.min.css")
		script(src="bootstrap.min.js")
	body.container
		header
			h1 #{title}
			p
				small #{description}
		article
			p: em 見違えるほど簡単にCでSHIORIを作れたら――
			p: a(href="") ダウンロード
			h2 これは何か
			p
				| C言語で
				a(href="http://usada.sakura.vg/", target="_blank") 伺か
				| のSHIORIサブシステムを実装するライブラリです。
			p: strong 伺かのゴースト制作の根幹に新しい選択肢を与えます。
			p これを使えば煩わしいSHIORI/3.0の解釈や本体との文字列の受け渡しに悩む必要はもうありません。
			p あなたがすることはshiori.cとshiolink.cから参照されているshiori_events.cを編集してイベントを定義するだけです。
			p あとはmakeを走らせれば、ネイティブのshiori.dllとSHIOLINKインターフェース対応のshiori.exeがすぐに作成できます。
			p
				| さらには
				a(href="http://bellard.org/tcc/", target="_blank") tcc(Tiny C Compiler)
				| を使えばまるでスクリプト言語のようにCで書いたSHIORIをすぐ実行できます。
			h2 内容
			p このライブラリは以下のコンポーネントからなります。
			ul
				li SHIORI3.xのパース・ビルド・コンテナと、load()、request()、unload()インターフェースのベースを提供する<strong>cshiori</strong>ライブラリ
				li SHIOLINKインターフェースのベースを提供する<strong>cshiolink</strong>ライブラリ
				li 文字列ユーティリティを提供する<strong>strutl</strong>ライブラリ
				li SHIORI/3.0 DLLを実装する<strong>shiori.c</strong>
				li SHIORI/3.0 SHIOLINKを実装する<strong>shiolink.c</strong>
			h2 理念
			p cshioriは「Cによる栞フレームワーク」であると同時に「Cによる栞」です。
			p cshioriは「Cによる栞フレームワーク」なので、伺か専用汎用栞の作成が容易になり、活性化の一助になるでしょう。
			p またCで実装されることでさまざまなプラットフォームへの基本的な移植が容易になるでしょう。
			p それだけでなく、コンテナ化による容易なリクエスト・レスポンスへのアクセスと、即時実行可能なtccによるスクリプト言語のような使用感により、「Cによる栞」として、もはや「栞作者ではなくゴースト作者がshiori.dllを作成する」ことが可能になります。
			ul
				li
					a(href="https://code.google.com/p/yaya-shiori/", target="_blank") Lesser C
					| ではなく本物のCで処理を実装すること
				li 「辞書のネタバレ」を防ぐ究極の難読化
			p 既存のshiori.dllがサポートするスクリプトによらずオリジナルのshiori.dllを作ることが、ゴースト制作の新しい選択肢になります。
			h2 使用方法
			p このライブラリはgcc、clang、tccによるコンパイルが可能です。
			p shiori_events.cを編集することでSHIORI/3.xのイベントを定義してください。
			p 手軽に使用したい場合は<code>tcc/tcc.exe -run shiolink.c</code>(make run)で即時実行できます。
			p shiori.dllを作成したい場合は<code>tcc/tcc.exe -shared -o shiori.dll shiori.c</code>(make shiori)です。
			p SHIOLINK.DLL対応のshiori.exeを作成したい場合は<code>tcc/tcc.exe -o shiori.exe shiolink.c</code>(make shiolink)です。
			p ライブラリは適切にリクエストとレスポンスを管理するのでshiori_events.c内の変数のみのメモリ管理を考えれば大丈夫です。
			p
				| 内部を詳しく知りたい場合は
				a(href="doc") ドキュメント
				| を読んでください。実際に必要になる箇所はcshiori.hが大半でしょう。
		footer
			p: small
				| (C) 2014 Narazaka : Licensed under The MIT License - 
				a(href="http://narazaka.net/license/MIT?2014", target="_blank") http://narazaka.net/license/MIT?2014
